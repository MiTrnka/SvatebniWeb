@* Tato komponenta (stránka) reprezentuje veřejně přístupný svatební web.
Je navržena tak, aby zobrazila detaily konkrétní svatby na základě unikátní
a snadno zapamatovatelné URL adresy (tzv. "slug").

Definuje routovací šablonu pro tuto stránku. Říká, že tato komponenta
se zobrazí pro jakoukoliv URL adresu, která následuje za kořenem webu
(např. "mujweb.cz/novakovi"). Text "novakovi" bude zachycen do parametru 'UrlSlug'. *@
@page "/{UrlSlug}"

@using SvatebniWeb.Web.Data
@using SvatebniWeb.Web.Data.Models
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext

@* Podmíněné zobrazení obsahu. Nejprve se zkontroluje, zda byla v databázi
nalezena odpovídající svatba a je uložena v proměnné 'wedding'. *@
@if (wedding != null)
{
    // Pokud byl svatební web nalezen, nastaví se titulek stránky (viditelný v záložce prohlížeče).
    <PageTitle>Svatba: @wedding.Title</PageTitle>

    // Zobrazení samotného obsahu stránky.
    <div class="container">
        <h1>@wedding.Title</h1>
        <p>Vítejte na našem svatebním webu!</p>
        @* Zde v budoucnu přijdou další informace: fotky, program, atd. *@
    </div>
}
else
{
    // Pokud svatební web s danou URL adresou nebyl v databázi nalezen,
    // zobrazí se uživateli chybová stránka.
    <PageTitle>Stránka nenalezena</PageTitle>
    <div class="container">
        <h1>Svatební web nenalezen</h1>
        <p>Je nám líto, ale stránka s touto adresou neexistuje.</p>
    </div>
}

@code {
    // Vlastnost, do které Blazor automaticky uloží hodnotu z URL adresy.
    // Atribut [Parameter] je klíčový pro propojení s routovacím parametrem "{UrlSlug}".
    [Parameter]
    public string? UrlSlug { get; set; }

    // Privátní pole pro uložení dat o svatbě načtených z databáze.
    // Je typu Wedding (model definující data o svatbě) a může být null,
    // pokud se data ještě nenačetla nebo pokud svatba neexistuje.
    private Wedding? wedding;

    /// <summary>
    /// Metoda životního cyklu komponenty. Spustí se pokaždé, když komponenta
    /// obdrží nové nebo změněné parametry zvenčí (v tomto případě z URL).
    /// Je to vhodné místo pro načtení dat závislých na těchto parametrech.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Ujistíme se, že UrlSlug má nějakou hodnotu, než se pokusíme hledat v databázi.
        if (!string.IsNullOrEmpty(UrlSlug))
        {
            // Provedení asynchronního databázového dotazu.
            // .AsNoTracking() je výkonnostní optimalizace, která říká Entity Frameworku,
            // že data pouze čteme a nebudeme je měnit. EF je pak nemusí "sledovat".
            // .FirstOrDefaultAsync() vyhledá první svatbu, jejíž UrlSlug se shoduje
            // s tím v naší proměnné. Pokud žádnou nenajde, bezpečně vrátí null.
            wedding = await DbContext.Weddings
                .AsNoTracking()
                .FirstOrDefaultAsync(w => w.UrlSlug == UrlSlug);
        }
    }
}