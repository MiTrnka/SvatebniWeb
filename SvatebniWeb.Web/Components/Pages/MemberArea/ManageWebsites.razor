@page "/moje-weby"
@* Atribut [Authorize] je klíčový pro zabezpečení. Zajišťuje, že na tuto stránku
může vstoupit pouze přihlášený uživatel. Nepřihlášený uživatel bude automaticky
přesměrován na přihlašovací stránku. *@
@attribute [Authorize]

@using System.Security.Claims @* Potřebné pro práci s informacemi (claims) o identitě uživatele, konkrétně pro získání jeho ID. *@
@using Microsoft.AspNetCore.Components.Authorization @* Pro práci se stavem autentizace. *@
@using SvatebniWeb.Web.Data
@using SvatebniWeb.Web.Data.Models
@using Microsoft.EntityFrameworkCore

@inject ApplicationDbContext DbContext // Služba pro komunikaci s databází.
@inject AuthenticationStateProvider AuthenticationStateProvider // Služba pro zjištění informací o aktuálně přihlášeném uživateli.
@inject NavigationManager NavigationManager // Služba, která umožňuje programové přecházení mezi stránkami (navigaci).

<PageTitle>Moje svatební weby</PageTitle>

<h1>Moje svatební weby</h1>

<p>Zde můžete spravovat všechny vaše vytvořené svatební stránky.</p>

<button class="btn btn-primary" @onclick="CreateNewWeb">
    Založit nový web
</button>

@* Tento blok řídí, co se zobrazí na stránce v závislosti na stavu načítání dat. *@
@if (userWeddings == null)
{
    // Zobrazí se, pokud data ještě nebyla načtena z databáze (seznam userWeddings je null).
    <p><em>Načítám vaše weby...</em></p>
}
else if (!userWeddings.Any())
{
    // Zobrazí se, pokud je seznam načtený, ale je prázdný (uživatel nemá žádné weby).
    <p><em>Zatím jste nevytvořili žádný svatební web. Založte si svůj první!</em></p>
}
else
{
    // Zobrazí se, pokud seznam obsahuje alespoň jeden svatební web.
    // Vykreslí se HTML tabulka s daty.
    <table>
        <thead>
            <tr>
                <th>Nadpis webu</th>
                <th>URL adresa (/...)</th>
                <th>Akce</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var wedding in userWeddings)
            {
                // Pro každý web v seznamu se vygeneruje jeden řádek v tabulce.
                <tr>
                    <td>@wedding.Title</td>
                    <td>@wedding.UrlSlug</td>
                    <td>
                        @* Komponenta NavLink se chová jako odkaz, ale podporuje klientské routování Blazoru (bez znovunačtení stránky).
                        Směřuje na stránku pro úpravu konkrétního webu, přičemž do URL vkládá jeho ID. *@
                        <NavLink href="@($"/muj-web/{wedding.Id}")" class="btn btn-secondary">Upravit</NavLink>
                        @* Standardní HTML odkaz, který otevře veřejnou verzi webu v nové záložce. *@
                        <a href="@($"/{wedding.UrlSlug}")" target="_blank" class="btn btn-info">Zobrazit</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    // Privátní pole pro uložení seznamu svatebních webů načtených z databáze.
    // Otazník značí, že hodnota může být 'null', což je výchozí stav před načtením dat.
    private List<Wedding>? userWeddings;

    /// <summary>
    /// Metoda životního cyklu komponenty. Je volána automaticky při její inicializaci.
    /// Je to preferované místo pro provádění asynchronních operací, jako je načítání dat.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        // Získáme aktuální stav přihlášení uživatele.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        // Ověříme, zda je uživatel skutečně přihlášen.
        if (user.Identity?.IsAuthenticated == true)
        {
            // Z identity uživatele získáme jeho unikátní ID. To je klíčový identifikátor
            // uložený v databázi při registraci.
            var currentUserId = user.FindFirstValue(ClaimTypes.NameIdentifier);

            // Pokud se podařilo ID získat...
            if (currentUserId != null)
            {
                // ...provedeme dotaz do databáze. Načteme pouze ty svatební weby,
                // které mají v sloupci 'OwnerId' hodnotu shodnou s ID přihlášeného uživatele.
                // To je zásadní pro bezpečnost, aby uživatel neviděl cizí data.
                // Výsledky seřadíme abecedně podle titulku.
                userWeddings = await DbContext.Weddings
                    .Where(w => w.OwnerId == currentUserId)
                    .OrderBy(w => w.Title)
                    .ToListAsync();
            }
        }
    }

    /// <summary>
    /// Metoda volaná po kliknutí na tlačítko "Založit nový web".
    /// </summary>
    private void CreateNewWeb()
    {
        // Pomocí NavigationManageru přesměrujeme uživatele na stránku pro editaci.
        // Adresa '/muj-web/0' je konvence, která říká editační stránce,
        // že se nemá načítat existující záznam, ale má se vytvořit nový.
        NavigationManager.NavigateTo("/muj-web/0");
    }
}