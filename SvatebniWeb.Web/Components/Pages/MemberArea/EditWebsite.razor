@page "/muj-web/{Id:int}"
@attribute [Authorize]

@*
    Přidali jsme @using System.Security.Claims, abychom mohli snadno
    získat ID aktuálně přihlášeného uživatele.
*@
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SvatebniWeb.Web.Data
@using SvatebniWeb.Web.Data.Models

@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@pageTitle</PageTitle>

<h3>@pageTitle</h3>

@if (wedding != null)
{
    @* Formulář zůstává beze změny *@
    <EditForm Model="wedding" OnValidSubmit="HandleValidSubmit" FormName="EditWedding">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-summary">@errorMessage</div>
        }

        <div class="form-field">
            <label for="title">Hlavní nadpis webu:</label>
            <InputText id="title" class="input-field" @bind-Value="wedding.Title" />
            <ValidationMessage For="() => wedding.Title" />
        </div>

        <div class="form-field">
            <label for="slug">Text do URL adresy (bez diakritiky a mezer):</label>
            <div class="url-group">
                <span class="url-prefix">https://svatebniweb.cz/</span>
                <InputText id="slug" class="input-field" @bind-Value="wedding.UrlSlug" />
            </div>
            <ValidationMessage For="() => wedding.UrlSlug" />
        </div>

        <button type="submit" class="submit-button">Uložit změny</button>
        <a href="/moje-weby" class="cancel-button">Zrušit</a>
    </EditForm>
}
else
{
    @*
        Pokud se data stále načítají NEBO pokud uživatel nemá oprávnění,
        zobrazíme tuto zprávu.
    *@
    <p><em>@loadingMessage</em></p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Wedding? wedding;
    private string pageTitle = "Načítání...";
    private string? errorMessage;
    private string loadingMessage = "Načítám data..."; // Přidali jsme proměnnou pro načítací/chybovou hlášku

    /// <summary>
    /// Metoda životního cyklu, která se zavolá při načtení komponenty.
    /// Zde provádíme klíčové bezpečnostní kontroly.
    /// </summary>
    protected override async Task OnParametersSetAsync()
    {
        // Získáme stav přihlášení a ID aktuálního uživatele.
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var currentUserId = authState.User.FindFirstValue(ClaimTypes.NameIdentifier);

        // Pojistka pro případ, že by se sem dostal nepřihlášený uživatel.
        // I když máme [Authorize], je dobré mít obranu i zde.
        if (string.IsNullOrEmpty(currentUserId))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        if (Id == 0) // Režim: Vytvoření nového webu
        {
            pageTitle = "Založení nového svatebního webu";
            wedding = new Wedding
            {
                Title = "",
                UrlSlug = "",
                OwnerId = currentUserId // Důležité: Novému webu rovnou přiřadíme vlastníka
            };
        }
        else // Režim: Editace existujícího webu
        {
            pageTitle = "Úprava svatebního webu";
            // Najdeme web v databázi podle ID z URL.
            wedding = await DbContext.Weddings.FindAsync(Id);

            // =================================================================
            // ZDE JE NOVÁ, KLÍČOVÁ BEZPEČNOSTNÍ KONTROLA
            // =================================================================
            // Ověříme, že načtený web existuje A ZÁROVEŇ že jeho OwnerId
            // se shoduje s ID přihlášeného uživatele.
            if (wedding == null || wedding.OwnerId != currentUserId)
            {
                // Pokud ne, zabráníme v editaci!
                // Změníme zprávu a nastavíme 'wedding' na null, aby se nezobrazil formulář.
                loadingMessage = "Tento záznam neexistuje nebo k němu nemáte oprávnění.";
                wedding = null;
            }
        }
    }

    /// <summary>
    /// Metoda pro uložení formuláře. Zůstává beze změny.
    /// </summary>
    private async Task HandleValidSubmit()
    {
        errorMessage = null;
        if (wedding == null) return;

        var slugExists = await DbContext.Weddings.AnyAsync(w => w.UrlSlug == wedding.UrlSlug && w.Id != wedding.Id);
        if (slugExists)
        {
            errorMessage = "Tento text do URL adresy je již použit. Zvolte prosím jiný.";
            return;
        }

        if (Id == 0)
        {
            DbContext.Weddings.Add(wedding);
        }
        else
        {
            DbContext.Weddings.Update(wedding);
        }
        await DbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/moje-weby");
    }
}